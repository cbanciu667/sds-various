# Stage 1: Build
FROM python:3.9-slim AS builder
# Install necessary build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*
# Set the working directory
WORKDIR /app
# Copy the requirements file and install dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
# Copy the application code
COPY . .
# Compile the model (if necessary)
RUN python compile_model.py
# Install PyInstaller
RUN pip install pyinstaller
# Create a standalone executable
RUN pyinstaller --onefile inference.py

# Stage 2: Using scratch image to keep the size small
FROM scratch
# Set the working directory
WORKDIR /app
# Copy only the necessary files from the build stage
COPY --from=builder /app/dist/inference /app/inference
COPY --from=builder /app/model /app/model
# Run the inference executable
ENTRYPOINT ["/app/inference"]

# Building this multi-stage Dockerfile results in an image size of approximately 85 MB â€” a reduction of over 90%
# compared to the base Python image.

# HINT: Use && to chain commands and clean up in the same layer
# HINT: Use scratch image to keep the size small
# HINT: Use multi-stage build to reduce the size of the final image
# HINT: Instead of starting with ubuntu:latest or other large images, switch to alpine
# HINT: Use docker-slim build <image-name> to slim down the image

# Prune unused images:
# docker system prune -f
# docker image prune -a -f

